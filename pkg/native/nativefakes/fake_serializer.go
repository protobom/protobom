// Code generated by counterfeiter. DO NOT EDIT.
package nativefakes

import (
	"io"
	"sync"

	"github.com/protobom/protobom/pkg/native"
	"github.com/protobom/protobom/pkg/sbom"
)

type FakeSerializer struct {
	RenderStub        func(interface{}, io.Writer, *native.RenderOptions, interface{}) error
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		arg1 interface{}
		arg2 io.Writer
		arg3 *native.RenderOptions
		arg4 interface{}
	}
	renderReturns struct {
		result1 error
	}
	renderReturnsOnCall map[int]struct {
		result1 error
	}
	SerializeStub        func(*sbom.Document, *native.SerializeOptions, interface{}) (interface{}, error)
	serializeMutex       sync.RWMutex
	serializeArgsForCall []struct {
		arg1 *sbom.Document
		arg2 *native.SerializeOptions
		arg3 interface{}
	}
	serializeReturns struct {
		result1 interface{}
		result2 error
	}
	serializeReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSerializer) Render(arg1 interface{}, arg2 io.Writer, arg3 *native.RenderOptions, arg4 interface{}) error {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		arg1 interface{}
		arg2 io.Writer
		arg3 *native.RenderOptions
		arg4 interface{}
	}{arg1, arg2, arg3, arg4})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{arg1, arg2, arg3, arg4})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSerializer) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeSerializer) RenderCalls(stub func(interface{}, io.Writer, *native.RenderOptions, interface{}) error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeSerializer) RenderArgsForCall(i int) (interface{}, io.Writer, *native.RenderOptions, interface{}) {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	argsForCall := fake.renderArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeSerializer) RenderReturns(result1 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSerializer) RenderReturnsOnCall(i int, result1 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSerializer) Serialize(arg1 *sbom.Document, arg2 *native.SerializeOptions, arg3 interface{}) (interface{}, error) {
	fake.serializeMutex.Lock()
	ret, specificReturn := fake.serializeReturnsOnCall[len(fake.serializeArgsForCall)]
	fake.serializeArgsForCall = append(fake.serializeArgsForCall, struct {
		arg1 *sbom.Document
		arg2 *native.SerializeOptions
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.SerializeStub
	fakeReturns := fake.serializeReturns
	fake.recordInvocation("Serialize", []interface{}{arg1, arg2, arg3})
	fake.serializeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSerializer) SerializeCallCount() int {
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	return len(fake.serializeArgsForCall)
}

func (fake *FakeSerializer) SerializeCalls(stub func(*sbom.Document, *native.SerializeOptions, interface{}) (interface{}, error)) {
	fake.serializeMutex.Lock()
	defer fake.serializeMutex.Unlock()
	fake.SerializeStub = stub
}

func (fake *FakeSerializer) SerializeArgsForCall(i int) (*sbom.Document, *native.SerializeOptions, interface{}) {
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	argsForCall := fake.serializeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSerializer) SerializeReturns(result1 interface{}, result2 error) {
	fake.serializeMutex.Lock()
	defer fake.serializeMutex.Unlock()
	fake.SerializeStub = nil
	fake.serializeReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeSerializer) SerializeReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.serializeMutex.Lock()
	defer fake.serializeMutex.Unlock()
	fake.SerializeStub = nil
	if fake.serializeReturnsOnCall == nil {
		fake.serializeReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.serializeReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeSerializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	fake.serializeMutex.RLock()
	defer fake.serializeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSerializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ native.Serializer = new(FakeSerializer)
