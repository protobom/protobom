// Code generated by counterfeiter. DO NOT EDIT.
package nativefakes

import (
	"io"
	"sync"

	"github.com/protobom/protobom/pkg/native"
	"github.com/protobom/protobom/pkg/sbom"
)

type FakeUnserializer struct {
	UnserializeStub        func(io.Reader, *native.UnserializeOptions, interface{}) (*sbom.Document, error)
	unserializeMutex       sync.RWMutex
	unserializeArgsForCall []struct {
		arg1 io.Reader
		arg2 *native.UnserializeOptions
		arg3 interface{}
	}
	unserializeReturns struct {
		result1 *sbom.Document
		result2 error
	}
	unserializeReturnsOnCall map[int]struct {
		result1 *sbom.Document
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUnserializer) Unserialize(arg1 io.Reader, arg2 *native.UnserializeOptions, arg3 interface{}) (*sbom.Document, error) {
	fake.unserializeMutex.Lock()
	ret, specificReturn := fake.unserializeReturnsOnCall[len(fake.unserializeArgsForCall)]
	fake.unserializeArgsForCall = append(fake.unserializeArgsForCall, struct {
		arg1 io.Reader
		arg2 *native.UnserializeOptions
		arg3 interface{}
	}{arg1, arg2, arg3})
	stub := fake.UnserializeStub
	fakeReturns := fake.unserializeReturns
	fake.recordInvocation("Unserialize", []interface{}{arg1, arg2, arg3})
	fake.unserializeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUnserializer) UnserializeCallCount() int {
	fake.unserializeMutex.RLock()
	defer fake.unserializeMutex.RUnlock()
	return len(fake.unserializeArgsForCall)
}

func (fake *FakeUnserializer) UnserializeCalls(stub func(io.Reader, *native.UnserializeOptions, interface{}) (*sbom.Document, error)) {
	fake.unserializeMutex.Lock()
	defer fake.unserializeMutex.Unlock()
	fake.UnserializeStub = stub
}

func (fake *FakeUnserializer) UnserializeArgsForCall(i int) (io.Reader, *native.UnserializeOptions, interface{}) {
	fake.unserializeMutex.RLock()
	defer fake.unserializeMutex.RUnlock()
	argsForCall := fake.unserializeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUnserializer) UnserializeReturns(result1 *sbom.Document, result2 error) {
	fake.unserializeMutex.Lock()
	defer fake.unserializeMutex.Unlock()
	fake.UnserializeStub = nil
	fake.unserializeReturns = struct {
		result1 *sbom.Document
		result2 error
	}{result1, result2}
}

func (fake *FakeUnserializer) UnserializeReturnsOnCall(i int, result1 *sbom.Document, result2 error) {
	fake.unserializeMutex.Lock()
	defer fake.unserializeMutex.Unlock()
	fake.UnserializeStub = nil
	if fake.unserializeReturnsOnCall == nil {
		fake.unserializeReturnsOnCall = make(map[int]struct {
			result1 *sbom.Document
			result2 error
		})
	}
	fake.unserializeReturnsOnCall[i] = struct {
		result1 *sbom.Document
		result2 error
	}{result1, result2}
}

func (fake *FakeUnserializer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unserializeMutex.RLock()
	defer fake.unserializeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUnserializer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ native.Unserializer = new(FakeUnserializer)
