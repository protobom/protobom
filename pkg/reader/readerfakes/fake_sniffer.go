// Code generated by counterfeiter. DO NOT EDIT.
package readerfakes

import (
	"io"
	"sync"

	"github.com/protobom/protobom/pkg/formats"
	"github.com/protobom/protobom/pkg/reader"
)

type FakeSniffer struct {
	SniffFileStub        func(string) (formats.Format, error)
	sniffFileMutex       sync.RWMutex
	sniffFileArgsForCall []struct {
		arg1 string
	}
	sniffFileReturns struct {
		result1 formats.Format
		result2 error
	}
	sniffFileReturnsOnCall map[int]struct {
		result1 formats.Format
		result2 error
	}
	SniffReaderStub        func(io.ReadSeeker) (formats.Format, error)
	sniffReaderMutex       sync.RWMutex
	sniffReaderArgsForCall []struct {
		arg1 io.ReadSeeker
	}
	sniffReaderReturns struct {
		result1 formats.Format
		result2 error
	}
	sniffReaderReturnsOnCall map[int]struct {
		result1 formats.Format
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSniffer) SniffFile(arg1 string) (formats.Format, error) {
	fake.sniffFileMutex.Lock()
	ret, specificReturn := fake.sniffFileReturnsOnCall[len(fake.sniffFileArgsForCall)]
	fake.sniffFileArgsForCall = append(fake.sniffFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SniffFileStub
	fakeReturns := fake.sniffFileReturns
	fake.recordInvocation("SniffFile", []interface{}{arg1})
	fake.sniffFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSniffer) SniffFileCallCount() int {
	fake.sniffFileMutex.RLock()
	defer fake.sniffFileMutex.RUnlock()
	return len(fake.sniffFileArgsForCall)
}

func (fake *FakeSniffer) SniffFileCalls(stub func(string) (formats.Format, error)) {
	fake.sniffFileMutex.Lock()
	defer fake.sniffFileMutex.Unlock()
	fake.SniffFileStub = stub
}

func (fake *FakeSniffer) SniffFileArgsForCall(i int) string {
	fake.sniffFileMutex.RLock()
	defer fake.sniffFileMutex.RUnlock()
	argsForCall := fake.sniffFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSniffer) SniffFileReturns(result1 formats.Format, result2 error) {
	fake.sniffFileMutex.Lock()
	defer fake.sniffFileMutex.Unlock()
	fake.SniffFileStub = nil
	fake.sniffFileReturns = struct {
		result1 formats.Format
		result2 error
	}{result1, result2}
}

func (fake *FakeSniffer) SniffFileReturnsOnCall(i int, result1 formats.Format, result2 error) {
	fake.sniffFileMutex.Lock()
	defer fake.sniffFileMutex.Unlock()
	fake.SniffFileStub = nil
	if fake.sniffFileReturnsOnCall == nil {
		fake.sniffFileReturnsOnCall = make(map[int]struct {
			result1 formats.Format
			result2 error
		})
	}
	fake.sniffFileReturnsOnCall[i] = struct {
		result1 formats.Format
		result2 error
	}{result1, result2}
}

func (fake *FakeSniffer) SniffReader(arg1 io.ReadSeeker) (formats.Format, error) {
	fake.sniffReaderMutex.Lock()
	ret, specificReturn := fake.sniffReaderReturnsOnCall[len(fake.sniffReaderArgsForCall)]
	fake.sniffReaderArgsForCall = append(fake.sniffReaderArgsForCall, struct {
		arg1 io.ReadSeeker
	}{arg1})
	stub := fake.SniffReaderStub
	fakeReturns := fake.sniffReaderReturns
	fake.recordInvocation("SniffReader", []interface{}{arg1})
	fake.sniffReaderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSniffer) SniffReaderCallCount() int {
	fake.sniffReaderMutex.RLock()
	defer fake.sniffReaderMutex.RUnlock()
	return len(fake.sniffReaderArgsForCall)
}

func (fake *FakeSniffer) SniffReaderCalls(stub func(io.ReadSeeker) (formats.Format, error)) {
	fake.sniffReaderMutex.Lock()
	defer fake.sniffReaderMutex.Unlock()
	fake.SniffReaderStub = stub
}

func (fake *FakeSniffer) SniffReaderArgsForCall(i int) io.ReadSeeker {
	fake.sniffReaderMutex.RLock()
	defer fake.sniffReaderMutex.RUnlock()
	argsForCall := fake.sniffReaderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSniffer) SniffReaderReturns(result1 formats.Format, result2 error) {
	fake.sniffReaderMutex.Lock()
	defer fake.sniffReaderMutex.Unlock()
	fake.SniffReaderStub = nil
	fake.sniffReaderReturns = struct {
		result1 formats.Format
		result2 error
	}{result1, result2}
}

func (fake *FakeSniffer) SniffReaderReturnsOnCall(i int, result1 formats.Format, result2 error) {
	fake.sniffReaderMutex.Lock()
	defer fake.sniffReaderMutex.Unlock()
	fake.SniffReaderStub = nil
	if fake.sniffReaderReturnsOnCall == nil {
		fake.sniffReaderReturnsOnCall = make(map[int]struct {
			result1 formats.Format
			result2 error
		})
	}
	fake.sniffReaderReturnsOnCall[i] = struct {
		result1 formats.Format
		result2 error
	}{result1, result2}
}

func (fake *FakeSniffer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sniffFileMutex.RLock()
	defer fake.sniffFileMutex.RUnlock()
	fake.sniffReaderMutex.RLock()
	defer fake.sniffReaderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSniffer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reader.Sniffer = new(FakeSniffer)
