// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: api/sbom.proto

package sbom

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// HashAlgorithm represents the hashing algorithms used within the Software Bill of Materials (SBOM) document.
// It enumerates various hash algorithms that can be employed to generate checksums or unique identifiers for files or data.
type HashAlgorithm int32

const (
	HashAlgorithm_UNKNOWN     HashAlgorithm = 0  // Unknown hash algorithm.
	HashAlgorithm_MD5         HashAlgorithm = 1  // MD5 hash algorithm.
	HashAlgorithm_SHA1        HashAlgorithm = 2  // SHA-1 hash algorithm.
	HashAlgorithm_SHA256      HashAlgorithm = 3  // SHA-256 hash algorithm.
	HashAlgorithm_SHA384      HashAlgorithm = 4  // SHA-384 hash algorithm.
	HashAlgorithm_SHA512      HashAlgorithm = 5  // SHA-512 hash algorithm.
	HashAlgorithm_SHA3_256    HashAlgorithm = 6  // SHA3-256 hash algorithm.
	HashAlgorithm_SHA3_384    HashAlgorithm = 7  // SHA3-384 hash algorithm.
	HashAlgorithm_SHA3_512    HashAlgorithm = 8  // SHA3-512 hash algorithm.
	HashAlgorithm_BLAKE2B_256 HashAlgorithm = 9  // BLAKE2B-256 hash algorithm.
	HashAlgorithm_BLAKE2B_384 HashAlgorithm = 10 // BLAKE2B-384 hash algorithm.
	HashAlgorithm_BLAKE2B_512 HashAlgorithm = 11 // BLAKE2B-512 hash algorithm.
	HashAlgorithm_BLAKE3      HashAlgorithm = 12 // BLAKE3 hash algorithm.
	HashAlgorithm_MD2         HashAlgorithm = 13 // MD2 hash algorithm, not supported by SPDX formats.
	HashAlgorithm_ADLER32     HashAlgorithm = 14 // Adler-32 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_MD4         HashAlgorithm = 15 // MD4 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_MD6         HashAlgorithm = 16 // MD6 hash algorithm, not supported by SPDX formats..
	HashAlgorithm_SHA224      HashAlgorithm = 17 // SHA-224 hash algorithm, not supported by SPDX formats..
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "MD5",
		2:  "SHA1",
		3:  "SHA256",
		4:  "SHA384",
		5:  "SHA512",
		6:  "SHA3_256",
		7:  "SHA3_384",
		8:  "SHA3_512",
		9:  "BLAKE2B_256",
		10: "BLAKE2B_384",
		11: "BLAKE2B_512",
		12: "BLAKE3",
		13: "MD2",
		14: "ADLER32",
		15: "MD4",
		16: "MD6",
		17: "SHA224",
	}
	HashAlgorithm_value = map[string]int32{
		"UNKNOWN":     0,
		"MD5":         1,
		"SHA1":        2,
		"SHA256":      3,
		"SHA384":      4,
		"SHA512":      5,
		"SHA3_256":    6,
		"SHA3_384":    7,
		"SHA3_512":    8,
		"BLAKE2B_256": 9,
		"BLAKE2B_384": 10,
		"BLAKE2B_512": 11,
		"BLAKE3":      12,
		"MD2":         13,
		"ADLER32":     14,
		"MD4":         15,
		"MD6":         16,
		"SHA224":      17,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[0].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[0]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{0}
}

// SoftwareIdentifierType represents different types of identifiers used for software entities within the Software Bill of Materials (SBOM).
type SoftwareIdentifierType int32

const (
	SoftwareIdentifierType_UNKNOWN_IDENTIFIER_TYPE SoftwareIdentifierType = 0 // Unknown software identifier type.
	SoftwareIdentifierType_PURL                    SoftwareIdentifierType = 1 // Package URL (PURL) identifier type.
	SoftwareIdentifierType_CPE22                   SoftwareIdentifierType = 2 // Common Platform Enumeration (CPE) version 2.2 identifier type.
	SoftwareIdentifierType_CPE23                   SoftwareIdentifierType = 3 // Common Platform Enumeration (CPE) version 2.3 identifier type.
	SoftwareIdentifierType_GITOID                  SoftwareIdentifierType = 4 // Git Object Identifier (OID) identifier type.
)

// Enum value maps for SoftwareIdentifierType.
var (
	SoftwareIdentifierType_name = map[int32]string{
		0: "UNKNOWN_IDENTIFIER_TYPE",
		1: "PURL",
		2: "CPE22",
		3: "CPE23",
		4: "GITOID",
	}
	SoftwareIdentifierType_value = map[string]int32{
		"UNKNOWN_IDENTIFIER_TYPE": 0,
		"PURL":                    1,
		"CPE22":                   2,
		"CPE23":                   3,
		"GITOID":                  4,
	}
)

func (x SoftwareIdentifierType) Enum() *SoftwareIdentifierType {
	p := new(SoftwareIdentifierType)
	*p = x
	return p
}

func (x SoftwareIdentifierType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SoftwareIdentifierType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[1].Descriptor()
}

func (SoftwareIdentifierType) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[1]
}

func (x SoftwareIdentifierType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SoftwareIdentifierType.Descriptor instead.
func (SoftwareIdentifierType) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{1}
}

// Purpose represents different purposes or roles assigned to software entities within the Software Bill of Materials (SBOM).
// It categorizes the roles that software components can fulfill.
type Purpose int32

const (
	Purpose_UNKNOWN_PURPOSE        Purpose = 0  // Unknown purpose.
	Purpose_APPLICATION            Purpose = 1  // Application purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_ARCHIVE                Purpose = 2  // Archive purpose. (SPDX2.3, SPDX3.0)
	Purpose_BOM                    Purpose = 3  // BOM purpose. (SPDX3.0)
	Purpose_CONFIGURATION          Purpose = 4  // Configuration purpose. (SPDX3.0)
	Purpose_CONTAINER              Purpose = 5  // Container purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_DATA                   Purpose = 6  // Data purpose. (CDX1.5, SPDX3.0)
	Purpose_DEVICE                 Purpose = 7  // Device purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_DEVICE_DRIVER          Purpose = 8  // Device Driver purpose. (CDX1.5, SPDX3.0)
	Purpose_DOCUMENTATION          Purpose = 9  // Documentation purpose. (SPDX3.0)
	Purpose_EVIDENCE               Purpose = 10 // Evidence purpose. (SPDX3.0)
	Purpose_EXECUTABLE             Purpose = 11 // Executable purpose. (SPDX3.0)
	Purpose_FILE                   Purpose = 12 // File purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_FIRMWARE               Purpose = 13 // Firmware purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_FRAMEWORK              Purpose = 14 // Framework purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_INSTALL                Purpose = 15 // Install purpose. (SPDX2.3, SPDX3.0)
	Purpose_LIBRARY                Purpose = 16 // Library purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_MACHINE_LEARNING_MODEL Purpose = 17 // Machine Learning Model purpose. (CDX1.5)
	Purpose_MANIFEST               Purpose = 18 // Manifest purpose. (SPDX3.0)
	Purpose_MODEL                  Purpose = 19 // Model purpose. (SPDX3.0)
	Purpose_MODULE                 Purpose = 20 // Module purpose. (SPDX3.0)
	Purpose_OPERATING_SYSTEM       Purpose = 21 // Operating System purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_OTHER                  Purpose = 22 // Other purpose. (SPDX2.3, SPDX3.0)
	Purpose_PATCH                  Purpose = 23 // Patch purpose. (SPDX3.0)
	Purpose_PLATFORM               Purpose = 24 // Platform purpose. (SPDX2.3, CDX1.5, SPDX3.0)
	Purpose_REQUIREMENT            Purpose = 25 // Requirement purpose. (SPDX3.0)
	Purpose_SOURCE                 Purpose = 26 // Source purpose. (SPDX2.3, SPDX3.0)
	Purpose_SPECIFICATION          Purpose = 27 // Specification purpose. (SPDX3.0)
	Purpose_TEST                   Purpose = 28 // Test purpose. (SPDX3.0)
)

// Enum value maps for Purpose.
var (
	Purpose_name = map[int32]string{
		0:  "UNKNOWN_PURPOSE",
		1:  "APPLICATION",
		2:  "ARCHIVE",
		3:  "BOM",
		4:  "CONFIGURATION",
		5:  "CONTAINER",
		6:  "DATA",
		7:  "DEVICE",
		8:  "DEVICE_DRIVER",
		9:  "DOCUMENTATION",
		10: "EVIDENCE",
		11: "EXECUTABLE",
		12: "FILE",
		13: "FIRMWARE",
		14: "FRAMEWORK",
		15: "INSTALL",
		16: "LIBRARY",
		17: "MACHINE_LEARNING_MODEL",
		18: "MANIFEST",
		19: "MODEL",
		20: "MODULE",
		21: "OPERATING_SYSTEM",
		22: "OTHER",
		23: "PATCH",
		24: "PLATFORM",
		25: "REQUIREMENT",
		26: "SOURCE",
		27: "SPECIFICATION",
		28: "TEST",
	}
	Purpose_value = map[string]int32{
		"UNKNOWN_PURPOSE":        0,
		"APPLICATION":            1,
		"ARCHIVE":                2,
		"BOM":                    3,
		"CONFIGURATION":          4,
		"CONTAINER":              5,
		"DATA":                   6,
		"DEVICE":                 7,
		"DEVICE_DRIVER":          8,
		"DOCUMENTATION":          9,
		"EVIDENCE":               10,
		"EXECUTABLE":             11,
		"FILE":                   12,
		"FIRMWARE":               13,
		"FRAMEWORK":              14,
		"INSTALL":                15,
		"LIBRARY":                16,
		"MACHINE_LEARNING_MODEL": 17,
		"MANIFEST":               18,
		"MODEL":                  19,
		"MODULE":                 20,
		"OPERATING_SYSTEM":       21,
		"OTHER":                  22,
		"PATCH":                  23,
		"PLATFORM":               24,
		"REQUIREMENT":            25,
		"SOURCE":                 26,
		"SPECIFICATION":          27,
		"TEST":                   28,
	}
)

func (x Purpose) Enum() *Purpose {
	p := new(Purpose)
	*p = x
	return p
}

func (x Purpose) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Purpose) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[2].Descriptor()
}

func (Purpose) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[2]
}

func (x Purpose) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Purpose.Descriptor instead.
func (Purpose) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{2}
}

// Type of the software component.
type Node_NodeType int32

const (
	Node_PACKAGE Node_NodeType = 0 // Software component type is a package.
	Node_FILE    Node_NodeType = 1 // Software component type is a file.
)

// Enum value maps for Node_NodeType.
var (
	Node_NodeType_name = map[int32]string{
		0: "PACKAGE",
		1: "FILE",
	}
	Node_NodeType_value = map[string]int32{
		"PACKAGE": 0,
		"FILE":    1,
	}
)

func (x Node_NodeType) Enum() *Node_NodeType {
	p := new(Node_NodeType)
	*p = x
	return p
}

func (x Node_NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Node_NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[3].Descriptor()
}

func (Node_NodeType) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[3]
}

func (x Node_NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Node_NodeType.Descriptor instead.
func (Node_NodeType) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{1, 0}
}

// Type enumerator representing the node relationship.
type Edge_Type int32

const (
	Edge_UNKNOWN              Edge_Type = 0  // Unknown type.
	Edge_amends               Edge_Type = 1  // Amends relationship type.
	Edge_ancestor             Edge_Type = 2  // Ancestor relationship type.
	Edge_buildDependency      Edge_Type = 3  // Build dependency relationship type.
	Edge_buildTool            Edge_Type = 4  // Build tool relationship type.
	Edge_contains             Edge_Type = 5  // Contains relationship type.
	Edge_contained_by         Edge_Type = 6  // Contained by relationship type. In SPDX 3.x, this field is not supported.
	Edge_copy                 Edge_Type = 7  // Copy relationship type.
	Edge_dataFile             Edge_Type = 8  // Data file relationship type.
	Edge_dependencyManifest   Edge_Type = 9  // Dependency manifest relationship type.
	Edge_dependsOn            Edge_Type = 10 // Depends on relationship type.
	Edge_dependencyOf         Edge_Type = 11 // Dependency of relationship type. In SPDX 3.x, this field is not supported.
	Edge_descendant           Edge_Type = 12 // Descendant relationship type.
	Edge_describes            Edge_Type = 13 // Describes relationship type.
	Edge_describedBy          Edge_Type = 14 // Described by relationship type. In SPDX 3.x, this field is not supported.
	Edge_devDependency        Edge_Type = 15 // Development dependency relationship type.
	Edge_devTool              Edge_Type = 16 // Development tool relationship type.
	Edge_distributionArtifact Edge_Type = 17 // Distribution artifact relationship type.
	Edge_documentation        Edge_Type = 18 // Documentation relationship type.
	Edge_dynamicLink          Edge_Type = 19 // Dynamic link relationship type.
	Edge_example              Edge_Type = 20 // Example relationship type.
	Edge_expandedFromArchive  Edge_Type = 21 // Expanded from archive relationship type.
	Edge_fileAdded            Edge_Type = 22 // File added relationship type.
	Edge_fileDeleted          Edge_Type = 23 // File deleted relationship type.
	Edge_fileModified         Edge_Type = 24 // File modified relationship type.
	Edge_generates            Edge_Type = 25 // Generates relationship type.
	Edge_generatedFrom        Edge_Type = 26 // Generated from relationship type. In SPDX 3.x, this field is not supported.
	Edge_metafile             Edge_Type = 27 // Metafile relationship type.
	Edge_optionalComponent    Edge_Type = 28 // Optional component relationship type.
	Edge_optionalDependency   Edge_Type = 29 // Optional dependency relationship type.
	Edge_other                Edge_Type = 30 // Other relationship type.
	Edge_packages             Edge_Type = 31 // Packages relationship type.
	Edge_patch                Edge_Type = 32 // Patch relationship type.
	Edge_prerequisite         Edge_Type = 33 // Prerequisite relationship type.
	Edge_prerequisiteFor      Edge_Type = 34 // Prerequisite for relationship type. In SPDX 3.x, this field is not supported.
	Edge_providedDependency   Edge_Type = 35 // Provided dependency relationship type.
	Edge_requirementFor       Edge_Type = 36 // Requirement for relationship type.
	Edge_runtimeDependency    Edge_Type = 37 // Runtime dependency relationship type.
	Edge_specificationFor     Edge_Type = 38 // Specification for relationship type.
	Edge_staticLink           Edge_Type = 39 // Static link relationship type.
	Edge_test                 Edge_Type = 40 // Test relationship type.
	Edge_testCase             Edge_Type = 41 // Test case relationship type.
	Edge_testDependency       Edge_Type = 42 // Test dependency relationship type.
	Edge_testTool             Edge_Type = 43 // Test tool relationship type.
	Edge_variant              Edge_Type = 44 // Variant relationship type.
)

// Enum value maps for Edge_Type.
var (
	Edge_Type_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "amends",
		2:  "ancestor",
		3:  "buildDependency",
		4:  "buildTool",
		5:  "contains",
		6:  "contained_by",
		7:  "copy",
		8:  "dataFile",
		9:  "dependencyManifest",
		10: "dependsOn",
		11: "dependencyOf",
		12: "descendant",
		13: "describes",
		14: "describedBy",
		15: "devDependency",
		16: "devTool",
		17: "distributionArtifact",
		18: "documentation",
		19: "dynamicLink",
		20: "example",
		21: "expandedFromArchive",
		22: "fileAdded",
		23: "fileDeleted",
		24: "fileModified",
		25: "generates",
		26: "generatedFrom",
		27: "metafile",
		28: "optionalComponent",
		29: "optionalDependency",
		30: "other",
		31: "packages",
		32: "patch",
		33: "prerequisite",
		34: "prerequisiteFor",
		35: "providedDependency",
		36: "requirementFor",
		37: "runtimeDependency",
		38: "specificationFor",
		39: "staticLink",
		40: "test",
		41: "testCase",
		42: "testDependency",
		43: "testTool",
		44: "variant",
	}
	Edge_Type_value = map[string]int32{
		"UNKNOWN":              0,
		"amends":               1,
		"ancestor":             2,
		"buildDependency":      3,
		"buildTool":            4,
		"contains":             5,
		"contained_by":         6,
		"copy":                 7,
		"dataFile":             8,
		"dependencyManifest":   9,
		"dependsOn":            10,
		"dependencyOf":         11,
		"descendant":           12,
		"describes":            13,
		"describedBy":          14,
		"devDependency":        15,
		"devTool":              16,
		"distributionArtifact": 17,
		"documentation":        18,
		"dynamicLink":          19,
		"example":              20,
		"expandedFromArchive":  21,
		"fileAdded":            22,
		"fileDeleted":          23,
		"fileModified":         24,
		"generates":            25,
		"generatedFrom":        26,
		"metafile":             27,
		"optionalComponent":    28,
		"optionalDependency":   29,
		"other":                30,
		"packages":             31,
		"patch":                32,
		"prerequisite":         33,
		"prerequisiteFor":      34,
		"providedDependency":   35,
		"requirementFor":       36,
		"runtimeDependency":    37,
		"specificationFor":     38,
		"staticLink":           39,
		"test":                 40,
		"testCase":             41,
		"testDependency":       42,
		"testTool":             43,
		"variant":              44,
	}
)

func (x Edge_Type) Enum() *Edge_Type {
	p := new(Edge_Type)
	*p = x
	return p
}

func (x Edge_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Edge_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[4].Descriptor()
}

func (Edge_Type) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[4]
}

func (x Edge_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Edge_Type.Descriptor instead.
func (Edge_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{3, 0}
}

// Type enumerator representing of the external reference.
type ExternalReference_ExternalReferenceType int32

const (
	ExternalReference_UNKNOWN                                 ExternalReference_ExternalReferenceType = 0  // Unknown type.
	ExternalReference_ATTESTATION                             ExternalReference_ExternalReferenceType = 1  // Attestation type.
	ExternalReference_BINARY                                  ExternalReference_ExternalReferenceType = 2  // Binary type.
	ExternalReference_BOM                                     ExternalReference_ExternalReferenceType = 3  // BOM type.
	ExternalReference_BOWER                                   ExternalReference_ExternalReferenceType = 4  // Bower type.
	ExternalReference_BUILD_META                              ExternalReference_ExternalReferenceType = 5  // Build meta type.
	ExternalReference_BUILD_SYSTEM                            ExternalReference_ExternalReferenceType = 6  // Build system type.
	ExternalReference_CERTIFICATION_REPORT                    ExternalReference_ExternalReferenceType = 7  // Certification report type.
	ExternalReference_CHAT                                    ExternalReference_ExternalReferenceType = 8  // Chat type.
	ExternalReference_CODIFIED_INFRASTRUCTURE                 ExternalReference_ExternalReferenceType = 9  // Codified infrastructure type.
	ExternalReference_COMPONENT_ANALYSIS_REPORT               ExternalReference_ExternalReferenceType = 10 // Component analysis report type.
	ExternalReference_CONFIGURATION                           ExternalReference_ExternalReferenceType = 11 // Configuration type.
	ExternalReference_DISTRIBUTION_INTAKE                     ExternalReference_ExternalReferenceType = 12 // Distribution intake type.
	ExternalReference_DOCUMENTATION                           ExternalReference_ExternalReferenceType = 13 // Documentation type.
	ExternalReference_DOWNLOAD                                ExternalReference_ExternalReferenceType = 14 // Download type.
	ExternalReference_DYNAMIC_ANALYSIS_REPORT                 ExternalReference_ExternalReferenceType = 15 // Dynamic analysis report type.
	ExternalReference_EOL_NOTICE                              ExternalReference_ExternalReferenceType = 16 // End-of-life notice type.
	ExternalReference_EVIDENCE                                ExternalReference_ExternalReferenceType = 17 // Evidence type.
	ExternalReference_EXPORT_CONTROL_ASSESSMENT               ExternalReference_ExternalReferenceType = 18 // Export control assessment type.
	ExternalReference_FORMULATION                             ExternalReference_ExternalReferenceType = 19 // Formulation type.
	ExternalReference_FUNDING                                 ExternalReference_ExternalReferenceType = 20 // Funding type.
	ExternalReference_ISSUE_TRACKER                           ExternalReference_ExternalReferenceType = 21 // Issue tracker type.
	ExternalReference_LICENSE                                 ExternalReference_ExternalReferenceType = 22 // License type.
	ExternalReference_LOG                                     ExternalReference_ExternalReferenceType = 23 // Log type.
	ExternalReference_MAILING_LIST                            ExternalReference_ExternalReferenceType = 24 // Mailing list type.
	ExternalReference_MATURITY_REPORT                         ExternalReference_ExternalReferenceType = 25 // Maturity report type.
	ExternalReference_MAVEN_CENTRAL                           ExternalReference_ExternalReferenceType = 26 // Maven Central type.
	ExternalReference_METRICS                                 ExternalReference_ExternalReferenceType = 27 // Metrics type.
	ExternalReference_MODEL_CARD                              ExternalReference_ExternalReferenceType = 28 // Model card type.
	ExternalReference_NPM                                     ExternalReference_ExternalReferenceType = 29 // NPM type.
	ExternalReference_NUGET                                   ExternalReference_ExternalReferenceType = 30 // NuGet type.
	ExternalReference_OTHER                                   ExternalReference_ExternalReferenceType = 31 // Other type.
	ExternalReference_POAM                                    ExternalReference_ExternalReferenceType = 32 // POAM type.
	ExternalReference_PRIVACY_ASSESSMENT                      ExternalReference_ExternalReferenceType = 33 // Privacy assessment type.
	ExternalReference_PRODUCT_METADATA                        ExternalReference_ExternalReferenceType = 34 // Product metadata type.
	ExternalReference_PURCHASE_ORDER                          ExternalReference_ExternalReferenceType = 35 // Purchase order type.
	ExternalReference_QUALITY_ASSESSMENT_REPORT               ExternalReference_ExternalReferenceType = 36 // Quality assessment report type.
	ExternalReference_QUALITY_METRICS                         ExternalReference_ExternalReferenceType = 37 // Quality metrics type.
	ExternalReference_RELEASE_HISTORY                         ExternalReference_ExternalReferenceType = 38 // Release history type.
	ExternalReference_RELEASE_NOTES                           ExternalReference_ExternalReferenceType = 39 // Release notes type.
	ExternalReference_RISK_ASSESSMENT                         ExternalReference_ExternalReferenceType = 40 // Risk assessment type.
	ExternalReference_RUNTIME_ANALYSIS_REPORT                 ExternalReference_ExternalReferenceType = 41 // Runtime analysis report type.
	ExternalReference_SECURE_SOFTWARE_ATTESTATION             ExternalReference_ExternalReferenceType = 42 // Secure software attestation type.
	ExternalReference_SECURITY_ADVERSARY_MODEL                ExternalReference_ExternalReferenceType = 43 // Security adversary model type.
	ExternalReference_SECURITY_ADVISORY                       ExternalReference_ExternalReferenceType = 44 // Security advisory type.
	ExternalReference_SECURITY_CONTACT                        ExternalReference_ExternalReferenceType = 45 // Security contact type.
	ExternalReference_SECURITY_FIX                            ExternalReference_ExternalReferenceType = 46 // Security fix type.
	ExternalReference_SECURITY_OTHER                          ExternalReference_ExternalReferenceType = 47 // Security other type.
	ExternalReference_SECURITY_PENTEST_REPORT                 ExternalReference_ExternalReferenceType = 48 // Security pentest report type.
	ExternalReference_SECURITY_POLICY                         ExternalReference_ExternalReferenceType = 49 // Security policy type.
	ExternalReference_SECURITY_SWID                           ExternalReference_ExternalReferenceType = 50 // Security SWID type.
	ExternalReference_SECURITY_THREAT_MODEL                   ExternalReference_ExternalReferenceType = 51 // Security threat model type.
	ExternalReference_SOCIAL                                  ExternalReference_ExternalReferenceType = 52 // Social type.
	ExternalReference_SOURCE_ARTIFACT                         ExternalReference_ExternalReferenceType = 53 // Source artifact type.
	ExternalReference_STATIC_ANALYSIS_REPORT                  ExternalReference_ExternalReferenceType = 54 // Static analysis report type.
	ExternalReference_SUPPORT                                 ExternalReference_ExternalReferenceType = 55 // Support type.
	ExternalReference_VCS                                     ExternalReference_ExternalReferenceType = 56 // VCS type.
	ExternalReference_VULNERABILITY_ASSERTION                 ExternalReference_ExternalReferenceType = 57 // Vulnerability assertion type.
	ExternalReference_VULNERABILITY_DISCLOSURE_REPORT         ExternalReference_ExternalReferenceType = 58 // Vulnerability disclosure report type.
	ExternalReference_VULNERABILITY_EXPLOITABILITY_ASSESSMENT ExternalReference_ExternalReferenceType = 59 // Vulnerability exploitability assessment type.
	ExternalReference_WEBSITE                                 ExternalReference_ExternalReferenceType = 60 // Website type.
)

// Enum value maps for ExternalReference_ExternalReferenceType.
var (
	ExternalReference_ExternalReferenceType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "ATTESTATION",
		2:  "BINARY",
		3:  "BOM",
		4:  "BOWER",
		5:  "BUILD_META",
		6:  "BUILD_SYSTEM",
		7:  "CERTIFICATION_REPORT",
		8:  "CHAT",
		9:  "CODIFIED_INFRASTRUCTURE",
		10: "COMPONENT_ANALYSIS_REPORT",
		11: "CONFIGURATION",
		12: "DISTRIBUTION_INTAKE",
		13: "DOCUMENTATION",
		14: "DOWNLOAD",
		15: "DYNAMIC_ANALYSIS_REPORT",
		16: "EOL_NOTICE",
		17: "EVIDENCE",
		18: "EXPORT_CONTROL_ASSESSMENT",
		19: "FORMULATION",
		20: "FUNDING",
		21: "ISSUE_TRACKER",
		22: "LICENSE",
		23: "LOG",
		24: "MAILING_LIST",
		25: "MATURITY_REPORT",
		26: "MAVEN_CENTRAL",
		27: "METRICS",
		28: "MODEL_CARD",
		29: "NPM",
		30: "NUGET",
		31: "OTHER",
		32: "POAM",
		33: "PRIVACY_ASSESSMENT",
		34: "PRODUCT_METADATA",
		35: "PURCHASE_ORDER",
		36: "QUALITY_ASSESSMENT_REPORT",
		37: "QUALITY_METRICS",
		38: "RELEASE_HISTORY",
		39: "RELEASE_NOTES",
		40: "RISK_ASSESSMENT",
		41: "RUNTIME_ANALYSIS_REPORT",
		42: "SECURE_SOFTWARE_ATTESTATION",
		43: "SECURITY_ADVERSARY_MODEL",
		44: "SECURITY_ADVISORY",
		45: "SECURITY_CONTACT",
		46: "SECURITY_FIX",
		47: "SECURITY_OTHER",
		48: "SECURITY_PENTEST_REPORT",
		49: "SECURITY_POLICY",
		50: "SECURITY_SWID",
		51: "SECURITY_THREAT_MODEL",
		52: "SOCIAL",
		53: "SOURCE_ARTIFACT",
		54: "STATIC_ANALYSIS_REPORT",
		55: "SUPPORT",
		56: "VCS",
		57: "VULNERABILITY_ASSERTION",
		58: "VULNERABILITY_DISCLOSURE_REPORT",
		59: "VULNERABILITY_EXPLOITABILITY_ASSESSMENT",
		60: "WEBSITE",
	}
	ExternalReference_ExternalReferenceType_value = map[string]int32{
		"UNKNOWN":                         0,
		"ATTESTATION":                     1,
		"BINARY":                          2,
		"BOM":                             3,
		"BOWER":                           4,
		"BUILD_META":                      5,
		"BUILD_SYSTEM":                    6,
		"CERTIFICATION_REPORT":            7,
		"CHAT":                            8,
		"CODIFIED_INFRASTRUCTURE":         9,
		"COMPONENT_ANALYSIS_REPORT":       10,
		"CONFIGURATION":                   11,
		"DISTRIBUTION_INTAKE":             12,
		"DOCUMENTATION":                   13,
		"DOWNLOAD":                        14,
		"DYNAMIC_ANALYSIS_REPORT":         15,
		"EOL_NOTICE":                      16,
		"EVIDENCE":                        17,
		"EXPORT_CONTROL_ASSESSMENT":       18,
		"FORMULATION":                     19,
		"FUNDING":                         20,
		"ISSUE_TRACKER":                   21,
		"LICENSE":                         22,
		"LOG":                             23,
		"MAILING_LIST":                    24,
		"MATURITY_REPORT":                 25,
		"MAVEN_CENTRAL":                   26,
		"METRICS":                         27,
		"MODEL_CARD":                      28,
		"NPM":                             29,
		"NUGET":                           30,
		"OTHER":                           31,
		"POAM":                            32,
		"PRIVACY_ASSESSMENT":              33,
		"PRODUCT_METADATA":                34,
		"PURCHASE_ORDER":                  35,
		"QUALITY_ASSESSMENT_REPORT":       36,
		"QUALITY_METRICS":                 37,
		"RELEASE_HISTORY":                 38,
		"RELEASE_NOTES":                   39,
		"RISK_ASSESSMENT":                 40,
		"RUNTIME_ANALYSIS_REPORT":         41,
		"SECURE_SOFTWARE_ATTESTATION":     42,
		"SECURITY_ADVERSARY_MODEL":        43,
		"SECURITY_ADVISORY":               44,
		"SECURITY_CONTACT":                45,
		"SECURITY_FIX":                    46,
		"SECURITY_OTHER":                  47,
		"SECURITY_PENTEST_REPORT":         48,
		"SECURITY_POLICY":                 49,
		"SECURITY_SWID":                   50,
		"SECURITY_THREAT_MODEL":           51,
		"SOCIAL":                          52,
		"SOURCE_ARTIFACT":                 53,
		"STATIC_ANALYSIS_REPORT":          54,
		"SUPPORT":                         55,
		"VCS":                             56,
		"VULNERABILITY_ASSERTION":         57,
		"VULNERABILITY_DISCLOSURE_REPORT": 58,
		"VULNERABILITY_EXPLOITABILITY_ASSESSMENT": 59,
		"WEBSITE": 60,
	}
)

func (x ExternalReference_ExternalReferenceType) Enum() *ExternalReference_ExternalReferenceType {
	p := new(ExternalReference_ExternalReferenceType)
	*p = x
	return p
}

func (x ExternalReference_ExternalReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalReference_ExternalReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[5].Descriptor()
}

func (ExternalReference_ExternalReferenceType) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[5]
}

func (x ExternalReference_ExternalReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalReference_ExternalReferenceType.Descriptor instead.
func (ExternalReference_ExternalReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{4, 0}
}

// Enumeration of SBOM document types.
type DocumentType_SBOMType int32

const (
	DocumentType_OTHER       DocumentType_SBOMType = 0 // Other document type.
	DocumentType_DESIGN      DocumentType_SBOMType = 1 // Design document type. (CDX: design)
	DocumentType_SOURCE      DocumentType_SBOMType = 2 // Source document type. (CDX: pre-build)
	DocumentType_BUILD       DocumentType_SBOMType = 3 // Build document type. (CDX: build)
	DocumentType_ANALYZED    DocumentType_SBOMType = 4 // Analyzed document type. (CDX: post-build)
	DocumentType_DEPLOYED    DocumentType_SBOMType = 5 // Deployed document type. (CDX: operations)
	DocumentType_RUNTIME     DocumentType_SBOMType = 6 // Runtime document type. (CDX: none)
	DocumentType_DISCOVERY   DocumentType_SBOMType = 7 // Discovery document type. (CDX Specific)
	DocumentType_DECOMISSION DocumentType_SBOMType = 8 // Decommission document type. (CDX Specific)
)

// Enum value maps for DocumentType_SBOMType.
var (
	DocumentType_SBOMType_name = map[int32]string{
		0: "OTHER",
		1: "DESIGN",
		2: "SOURCE",
		3: "BUILD",
		4: "ANALYZED",
		5: "DEPLOYED",
		6: "RUNTIME",
		7: "DISCOVERY",
		8: "DECOMISSION",
	}
	DocumentType_SBOMType_value = map[string]int32{
		"OTHER":       0,
		"DESIGN":      1,
		"SOURCE":      2,
		"BUILD":       3,
		"ANALYZED":    4,
		"DEPLOYED":    5,
		"RUNTIME":     6,
		"DISCOVERY":   7,
		"DECOMISSION": 8,
	}
)

func (x DocumentType_SBOMType) Enum() *DocumentType_SBOMType {
	p := new(DocumentType_SBOMType)
	*p = x
	return p
}

func (x DocumentType_SBOMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DocumentType_SBOMType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_sbom_proto_enumTypes[6].Descriptor()
}

func (DocumentType_SBOMType) Type() protoreflect.EnumType {
	return &file_api_sbom_proto_enumTypes[6]
}

func (x DocumentType_SBOMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DocumentType_SBOMType.Descriptor instead.
func (DocumentType_SBOMType) EnumDescriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{7, 0}
}

// Document is the top-level structure representing the entire Software Bill of Materials (SBOM).
// It serves as the core neutral ground for the SBOM translation process, encapsulating metadata,
// components (nodes), and the graph structure (edges).
type Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`                 // Metadata associated with the SBOM document
	NodeList *NodeList `protobuf:"bytes,2,opt,name=node_list,json=nodeList,proto3" json:"node_list,omitempty"` // List of nodes and edges forming the SBOM graph
}

func (x *Document) Reset() {
	*x = Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Document) ProtoMessage() {}

func (x *Document) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Document.ProtoReflect.Descriptor instead.
func (*Document) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{0}
}

func (x *Document) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Document) GetNodeList() *NodeList {
	if x != nil {
		return x.NodeList
	}
	return nil
}

// Node represents a central element within the Software Bill of Materials (SBOM) graph,
// serving as a vertex that captures vital information about a software component.
// Each Node in the SBOM graph signifies a distinct software component, forming the vertices of the graph.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                           // Unique identifier for the node.
	Type        Node_NodeType `protobuf:"varint,2,opt,name=type,proto3,enum=protobom.protobom.Node_NodeType" json:"type,omitempty"` // Type of the software component.
	Name        string        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                       // Name of the software component.
	Version     string        `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`                                 // Version string of the software component.
	FileName    string        `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`               // Package filename when there is one.
	UrlHome     string        `protobuf:"bytes,6,opt,name=url_home,json=urlHome,proto3" json:"url_home,omitempty"`                  // Website of the package.
	UrlDownload string        `protobuf:"bytes,7,opt,name=url_download,json=urlDownload,proto3" json:"url_download,omitempty"`      // Location to download the package.
	// Multiple licenses applicable to the software component,
	// Multiple licenses can be specified for CycloneDX 1.4 and files in SPDX.
	Licenses []string `protobuf:"bytes,8,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// Concluded license applicable to the software component,
	// This is only in SPDX and it is just one.
	LicenseConcluded string `protobuf:"bytes,9,opt,name=license_concluded,json=licenseConcluded,proto3" json:"license_concluded,omitempty"`
	LicenseComments  string `protobuf:"bytes,10,opt,name=license_comments,json=licenseComments,proto3" json:"license_comments,omitempty"` // Comments on the license.
	Copyright        string `protobuf:"bytes,11,opt,name=copyright,proto3" json:"copyright,omitempty"`                                    // Copyright information applicable to the software component.
	// This field is intended to capture details related to the source or origin of the software component.
	// It may include any relevant background information or additional comments.
	SourceInfo         string                 `protobuf:"bytes,13,opt,name=source_info,json=sourceInfo,proto3" json:"source_info,omitempty"`
	Comment            string                 `protobuf:"bytes,15,opt,name=comment,proto3" json:"comment,omitempty"`                                                 // Comments on the software component.
	Summary            string                 `protobuf:"bytes,16,opt,name=summary,proto3" json:"summary,omitempty"`                                                 // Concise description of the software component (short description).
	Description        string                 `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`                                         // Detailed description of the software component (full description).
	Attribution        []string               `protobuf:"bytes,18,rep,name=attribution,proto3" json:"attribution,omitempty"`                                         // One or more contributions or acknowledgments associated with the software component.
	Suppliers          []*Person              `protobuf:"bytes,19,rep,name=suppliers,proto3" json:"suppliers,omitempty"`                                             // One or more entities providing the software component.
	Originators        []*Person              `protobuf:"bytes,20,rep,name=originators,proto3" json:"originators,omitempty"`                                         // One or more entities involved in the creation or maintenance of the software component.
	ReleaseDate        *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=release_date,json=releaseDate,proto3" json:"release_date,omitempty"`                      // Release date of the software component.
	BuildDate          *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=build_date,json=buildDate,proto3" json:"build_date,omitempty"`                            // Build date of the software component.
	ValidUntilDate     *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=valid_until_date,json=validUntilDate,proto3" json:"valid_until_date,omitempty"`           // Valid until date of the software component.
	ExternalReferences []*ExternalReference   `protobuf:"bytes,24,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"` // External references associated with the software component.
	FileTypes          []string               `protobuf:"bytes,27,rep,name=file_types,json=fileTypes,proto3" json:"file_types,omitempty"`                            // File types associated with the component
	// Software identifer map used by the component.
	// Maps between the software identifier types and the identifier values.
	Identifiers map[int32]string `protobuf:"bytes,28,rep,name=identifiers,proto3" json:"identifiers,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Hashes map associated with the software component.
	// Maps between hash algorithms types and hash values.
	Hashes         map[int32]string `protobuf:"bytes,29,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PrimaryPurpose []Purpose        `protobuf:"varint,30,rep,packed,name=primary_purpose,json=primaryPurpose,proto3,enum=protobom.protobom.Purpose" json:"primary_purpose,omitempty"` // Primary purpose or role assigned to the software component.
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{1}
}

func (x *Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Node) GetType() Node_NodeType {
	if x != nil {
		return x.Type
	}
	return Node_PACKAGE
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Node) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Node) GetUrlHome() string {
	if x != nil {
		return x.UrlHome
	}
	return ""
}

func (x *Node) GetUrlDownload() string {
	if x != nil {
		return x.UrlDownload
	}
	return ""
}

func (x *Node) GetLicenses() []string {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Node) GetLicenseConcluded() string {
	if x != nil {
		return x.LicenseConcluded
	}
	return ""
}

func (x *Node) GetLicenseComments() string {
	if x != nil {
		return x.LicenseComments
	}
	return ""
}

func (x *Node) GetCopyright() string {
	if x != nil {
		return x.Copyright
	}
	return ""
}

func (x *Node) GetSourceInfo() string {
	if x != nil {
		return x.SourceInfo
	}
	return ""
}

func (x *Node) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Node) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Node) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Node) GetAttribution() []string {
	if x != nil {
		return x.Attribution
	}
	return nil
}

func (x *Node) GetSuppliers() []*Person {
	if x != nil {
		return x.Suppliers
	}
	return nil
}

func (x *Node) GetOriginators() []*Person {
	if x != nil {
		return x.Originators
	}
	return nil
}

func (x *Node) GetReleaseDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReleaseDate
	}
	return nil
}

func (x *Node) GetBuildDate() *timestamppb.Timestamp {
	if x != nil {
		return x.BuildDate
	}
	return nil
}

func (x *Node) GetValidUntilDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ValidUntilDate
	}
	return nil
}

func (x *Node) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Node) GetFileTypes() []string {
	if x != nil {
		return x.FileTypes
	}
	return nil
}

func (x *Node) GetIdentifiers() map[int32]string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *Node) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Node) GetPrimaryPurpose() []Purpose {
	if x != nil {
		return x.PrimaryPurpose
	}
	return nil
}

// Metadata encapsulates document-related details about the Software Bill of Materials (SBOM) document.
// It includes information such as the document's identifier, version, authorship, creation date,
// associated tools, and document types.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                       // // Unique identifier for the document. Serial number in CycloneDX foramts, SPDXID in spdx formats.
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`             // Version of the document. In Cyclone formats the version is translated from `Int` field in to a more general `String` field.
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                   // Name associated with the document.
	Date          *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=date,proto3" json:"date,omitempty"`                   // Created date of the Document. In SPDX formats mapped to the created date field.
	Tools         []*Tool                `protobuf:"bytes,5,rep,name=tools,proto3" json:"tools,omitempty"`                 // Tools used in the creation or processing of the document.
	Authors       []*Person              `protobuf:"bytes,6,rep,name=authors,proto3" json:"authors,omitempty"`             // Individuals or organizations involved in the creation or maintenance of the document.
	Comment       string                 `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`             // Comments on the document.
	DocumentTypes []*DocumentType        `protobuf:"bytes,8,rep,name=documentTypes,proto3" json:"documentTypes,omitempty"` // Types categorizing the document based on its purpose or stage in the software development lifecycle.
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{2}
}

func (x *Metadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Metadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *Metadata) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Metadata) GetAuthors() []*Person {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Metadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Metadata) GetDocumentTypes() []*DocumentType {
	if x != nil {
		return x.DocumentTypes
	}
	return nil
}

// Edge represents relationships between nodes in the Software Bill of Materials (SBOM) graph.
// Each Edge captures the type of relationship and the nodes involved, providing a structured
// way to model dependencies and connections within the SBOM.
type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type Edge_Type `protobuf:"varint,1,opt,name=type,proto3,enum=protobom.protobom.Edge_Type" json:"type,omitempty"` // Type enumerator representing the node relationship.
	From string    `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`                                   // Source node of the edge.
	To   []string  `protobuf:"bytes,3,rep,name=to,proto3" json:"to,omitempty"`                                       // Target nodes of the edge.
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{3}
}

func (x *Edge) GetType() Edge_Type {
	if x != nil {
		return x.Type
	}
	return Edge_UNKNOWN
}

func (x *Edge) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Edge) GetTo() []string {
	if x != nil {
		return x.To
	}
	return nil
}

// ExternalReference is an entry linking an element to a resource defined outside the SBOM standard.
type ExternalReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // URL providing reference to an external resource.
	// string type = 2; // Deprecated (string) use ExternalReferenceType instead, see https://github.com/protobom/protobom/issues/148..
	Comment   string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`     // Comments associated with the external reference.
	Authority string `protobuf:"bytes,4,opt,name=authority,proto3" json:"authority,omitempty"` // Authority responsible for the external reference.
	// string type = 5; // Deprecated (string map) use hashes field instead, see https://github.com/protobom/protobom/issues/89.
	Hashes map[int32]string                        `protobuf:"bytes,6,rep,name=hashes,proto3" json:"hashes,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Hashes associated with the external reference, Replaced field 5.
	Type   ExternalReference_ExternalReferenceType `protobuf:"varint,7,opt,name=type,proto3,enum=protobom.protobom.ExternalReference_ExternalReferenceType" json:"type,omitempty"`                              // Type of the external reference, Replaced field 2.
}

func (x *ExternalReference) Reset() {
	*x = ExternalReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReference) ProtoMessage() {}

func (x *ExternalReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReference.ProtoReflect.Descriptor instead.
func (*ExternalReference) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExternalReference) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ExternalReference) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

func (x *ExternalReference) GetHashes() map[int32]string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *ExternalReference) GetType() ExternalReference_ExternalReferenceType {
	if x != nil {
		return x.Type
	}
	return ExternalReference_UNKNOWN
}

// Person represents an individual or organization involved in the creation or maintenance
// of the document or node.
type Person struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                 // Name of the person or organization.
	IsOrg    bool      `protobuf:"varint,2,opt,name=is_org,json=isOrg,proto3" json:"is_org,omitempty"` // Indicates whether the entity is an organization (true) or an individual (false).
	Email    string    `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`               // Email address of the person or organization.
	Url      string    `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`                   // URL associated with the person or organization.
	Phone    string    `protobuf:"bytes,5,opt,name=phone,proto3" json:"phone,omitempty"`               // Phone number associated with the person or organization.
	Contacts []*Person `protobuf:"bytes,6,rep,name=contacts,proto3" json:"contacts,omitempty"`         // Contacts associated with the person or organization.
}

func (x *Person) Reset() {
	*x = Person{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Person) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Person) ProtoMessage() {}

func (x *Person) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Person.ProtoReflect.Descriptor instead.
func (*Person) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{5}
}

func (x *Person) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Person) GetIsOrg() bool {
	if x != nil {
		return x.IsOrg
	}
	return false
}

func (x *Person) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Person) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Person) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Person) GetContacts() []*Person {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// Tool represents a software tool used in the creation or processing of the Software Bill of Materials (SBOM) document.
type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // Name of the software tool.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"` // Version of the software tool.
	Vendor  string `protobuf:"bytes,3,opt,name=vendor,proto3" json:"vendor,omitempty"`   // Vendor or creator of the software tool.
}

func (x *Tool) Reset() {
	*x = Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{6}
}

func (x *Tool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Tool) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

// DocumentType represents the type of document in the Software Bill of Materials (SBOM) ecosystem.
// It categorizes the SBOM document based on its purpose or stage in the software development lifecycle.
type DocumentType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        *DocumentType_SBOMType `protobuf:"varint,1,opt,name=type,proto3,enum=protobom.protobom.DocumentType_SBOMType,oneof" json:"type,omitempty"` // SBOM document type.
	Name        *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`                                               // Name associated with the document type.
	Description *string                `protobuf:"bytes,3,opt,name=description,proto3,oneof" json:"description,omitempty"`                                 // Description of the document type.
}

func (x *DocumentType) Reset() {
	*x = DocumentType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DocumentType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DocumentType) ProtoMessage() {}

func (x *DocumentType) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DocumentType.ProtoReflect.Descriptor instead.
func (*DocumentType) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{7}
}

func (x *DocumentType) GetType() DocumentType_SBOMType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DocumentType_OTHER
}

func (x *DocumentType) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DocumentType) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// NodeList represents a collection of nodes and edges forming the Software Bill of Materials (SBOM) graph.
// It encapsulates the fundamental components of the SBOM, including software entities (nodes) and their relationships (edges).
type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes        []*Node  `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`                                   // List of software components (nodes) in the SBOM graph.
	Edges        []*Edge  `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`                                   // List of relationships (edges) between nodes in the SBOM graph.
	RootElements []string `protobuf:"bytes,3,rep,name=root_elements,json=rootElements,proto3" json:"root_elements,omitempty"` // List of root elements in the SBOM graph.
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_sbom_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_api_sbom_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_api_sbom_proto_rawDescGZIP(), []int{8}
}

func (x *NodeList) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeList) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *NodeList) GetRootElements() []string {
	if x != nil {
		return x.RootElements
	}
	return nil
}

var File_api_sbom_proto protoreflect.FileDescriptor

var file_api_sbom_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x6f, 0x6d, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7d, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x37, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x98, 0x0a, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x75, 0x72, 0x6c, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x75, 0x72, 0x6c, 0x48, 0x6f, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x72, 0x6c, 0x5f,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x75, 0x72, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x73, 0x12,
	0x3b, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x52,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f,
	0x75, 0x6e, 0x74, 0x69, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x45, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65,
	0x1a, 0x3e, 0x0a, 0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x39, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x21, 0x0a, 0x08, 0x4e,
	0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x41, 0x43, 0x4b, 0x41,
	0x47, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x22, 0xbd,
	0x02, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x54, 0x6f, 0x6f,
	0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x6f, 0x6d, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0d, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xe1,
	0x06, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x82, 0x06,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6d, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a,
	0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x10,
	0x06, 0x12, 0x08, 0x0a, 0x04, 0x63, 0x6f, 0x70, 0x79, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x10,
	0x09, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x10, 0x0a,
	0x12, 0x10, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x66,
	0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x73, 0x10,
	0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x64, 0x42, 0x79,
	0x10, 0x0e, 0x12, 0x11, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x54, 0x6f, 0x6f, 0x6c,
	0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x10, 0x11, 0x12, 0x11, 0x0a, 0x0d,
	0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x12, 0x12,
	0x0f, 0x0a, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x13,
	0x12, 0x0b, 0x0a, 0x07, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x10, 0x14, 0x12, 0x17, 0x0a,
	0x13, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x76, 0x65, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x64,
	0x64, 0x65, 0x64, 0x10, 0x16, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x10, 0x17, 0x12, 0x10, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x18, 0x12, 0x0d, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x73, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x1b, 0x12, 0x15, 0x0a, 0x11, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x10, 0x1c, 0x12,
	0x16, 0x0a, 0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x1d, 0x12, 0x09, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x1e, 0x12, 0x0c, 0x0a, 0x08, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x10, 0x1f,
	0x12, 0x09, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x10, 0x21, 0x12, 0x13, 0x0a,
	0x0f, 0x70, 0x72, 0x65, 0x72, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x10, 0x22, 0x12, 0x16, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x10, 0x24, 0x12, 0x15,
	0x0a, 0x11, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x79, 0x10, 0x25, 0x12, 0x14, 0x0a, 0x10, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x10, 0x26, 0x12, 0x0e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x27, 0x12, 0x08, 0x0a, 0x04, 0x74,
	0x65, 0x73, 0x74, 0x10, 0x28, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x74, 0x65, 0x73, 0x74, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x79, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x6f, 0x6f, 0x6c, 0x10, 0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x10, 0x2c, 0x22, 0x8b, 0x0c, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x48, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x39, 0x0a, 0x0b,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x09, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x4f, 0x4d, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x04, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10,
	0x06, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x43,
	0x48, 0x41, 0x54, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x5f,
	0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42, 0x55,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x4f, 0x57, 0x4e, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x0e, 0x12, 0x1b,
	0x0a, 0x17, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x53,
	0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x4f, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x43, 0x45, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x58, 0x50,
	0x4f, 0x52, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x5f, 0x41, 0x53, 0x53, 0x45,
	0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d,
	0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x55, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x43,
	0x45, 0x4e, 0x53, 0x45, 0x10, 0x16, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x47, 0x10, 0x17, 0x12,
	0x10, 0x0a, 0x0c, 0x4d, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x18, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x54, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x19, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x41, 0x56, 0x45, 0x4e, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x52, 0x41, 0x4c, 0x10, 0x1a, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x54,
	0x52, 0x49, 0x43, 0x53, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x50, 0x4d, 0x10, 0x1d, 0x12,
	0x09, 0x0a, 0x05, 0x4e, 0x55, 0x47, 0x45, 0x54, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x1f, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4f, 0x41, 0x4d, 0x10, 0x20, 0x12,
	0x16, 0x0a, 0x12, 0x50, 0x52, 0x49, 0x56, 0x41, 0x43, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53,
	0x53, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x21, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x44, 0x55,
	0x43, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10, 0x22, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x55, 0x52, 0x43, 0x48, 0x41, 0x53, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x10,
	0x23, 0x12, 0x1d, 0x0a, 0x19, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53,
	0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x24,
	0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4d, 0x45, 0x54, 0x52,
	0x49, 0x43, 0x53, 0x10, 0x25, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x26, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x45, 0x53, 0x10, 0x27, 0x12, 0x13, 0x0a,
	0x0f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x29, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41,
	0x52, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2a,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x56,
	0x45, 0x52, 0x53, 0x41, 0x52, 0x59, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x2b, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53,
	0x4f, 0x52, 0x59, 0x10, 0x2c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x46, 0x49, 0x58, 0x10, 0x2e, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x2f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x45,
	0x4e, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x30, 0x12, 0x13,
	0x0a, 0x0f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43,
	0x59, 0x10, 0x31, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f,
	0x53, 0x57, 0x49, 0x44, 0x10, 0x32, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10,
	0x33, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x34, 0x12, 0x13, 0x0a,
	0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46, 0x41, 0x43, 0x54,
	0x10, 0x35, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x41,
	0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x36, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x56,
	0x43, 0x53, 0x10, 0x38, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42,
	0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x52, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x39, 0x12, 0x23, 0x0a, 0x1f, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x5f, 0x52, 0x45,
	0x50, 0x4f, 0x52, 0x54, 0x10, 0x3a, 0x12, 0x2b, 0x0a, 0x27, 0x56, 0x55, 0x4c, 0x4e, 0x45, 0x52,
	0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x49, 0x54, 0x41,
	0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x3b, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x45, 0x42, 0x53, 0x49, 0x54, 0x45, 0x10, 0x3c,
	0x22, 0xa8, 0x01, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6f, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x69, 0x73, 0x4f, 0x72, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x04, 0x54,
	0x6f, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x42, 0x4f, 0x4d, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x22, 0x81, 0x01,
	0x0a, 0x08, 0x53, 0x42, 0x4f, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54,
	0x48, 0x45, 0x52, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4e, 0x41, 0x4c,
	0x59, 0x5a, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x10, 0x07,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x43, 0x4f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x08, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x8d, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2d, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x6f, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12,
	0x2d, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x6f, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x6f, 0x6d, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x6f, 0x6f, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x2a, 0xf0, 0x01, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x35, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53,
	0x48, 0x41, 0x31, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x48, 0x41, 0x35, 0x31, 0x32, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41,
	0x33, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x33, 0x5f,
	0x33, 0x38, 0x34, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x48, 0x41, 0x33, 0x5f, 0x35, 0x31,
	0x32, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x32, 0x42, 0x5f, 0x32,
	0x35, 0x36, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x32, 0x42, 0x5f,
	0x33, 0x38, 0x34, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x32, 0x42,
	0x5f, 0x35, 0x31, 0x32, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x33,
	0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x32, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x44, 0x4c, 0x45, 0x52, 0x33, 0x32, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x34, 0x10,
	0x0f, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x36, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48,
	0x41, 0x32, 0x32, 0x34, 0x10, 0x11, 0x2a, 0x61, 0x0a, 0x16, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1b, 0x0a, 0x17, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x49, 0x44, 0x45, 0x4e,
	0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x50, 0x55, 0x52, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x50, 0x45, 0x32, 0x32,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x50, 0x45, 0x32, 0x33, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x47, 0x49, 0x54, 0x4f, 0x49, 0x44, 0x10, 0x04, 0x2a, 0xb7, 0x03, 0x0a, 0x07, 0x50, 0x75,
	0x72, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x5f, 0x50, 0x55, 0x52, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x50,
	0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f, 0x4d, 0x10,
	0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x45,
	0x52, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x52, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x56, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0b, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52, 0x4d, 0x57,
	0x41, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x10,
	0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x10, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x41,
	0x4e, 0x49, 0x46, 0x45, 0x53, 0x54, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x44, 0x45,
	0x4c, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x14, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x10, 0x15, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x16,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54, 0x43, 0x48, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x45, 0x51,
	0x55, 0x49, 0x52, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x19, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x10, 0x1a, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x45, 0x53,
	0x54, 0x10, 0x1c, 0x42, 0x07, 0x5a, 0x05, 0x73, 0x62, 0x6f, 0x6d, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_sbom_proto_rawDescOnce sync.Once
	file_api_sbom_proto_rawDescData = file_api_sbom_proto_rawDesc
)

func file_api_sbom_proto_rawDescGZIP() []byte {
	file_api_sbom_proto_rawDescOnce.Do(func() {
		file_api_sbom_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_sbom_proto_rawDescData)
	})
	return file_api_sbom_proto_rawDescData
}

var file_api_sbom_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_api_sbom_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_api_sbom_proto_goTypes = []interface{}{
	(HashAlgorithm)(0),          // 0: protobom.protobom.HashAlgorithm
	(SoftwareIdentifierType)(0), // 1: protobom.protobom.SoftwareIdentifierType
	(Purpose)(0),                // 2: protobom.protobom.Purpose
	(Node_NodeType)(0),          // 3: protobom.protobom.Node.NodeType
	(Edge_Type)(0),              // 4: protobom.protobom.Edge.Type
	(ExternalReference_ExternalReferenceType)(0), // 5: protobom.protobom.ExternalReference.ExternalReferenceType
	(DocumentType_SBOMType)(0),                   // 6: protobom.protobom.DocumentType.SBOMType
	(*Document)(nil),                             // 7: protobom.protobom.Document
	(*Node)(nil),                                 // 8: protobom.protobom.Node
	(*Metadata)(nil),                             // 9: protobom.protobom.Metadata
	(*Edge)(nil),                                 // 10: protobom.protobom.Edge
	(*ExternalReference)(nil),                    // 11: protobom.protobom.ExternalReference
	(*Person)(nil),                               // 12: protobom.protobom.Person
	(*Tool)(nil),                                 // 13: protobom.protobom.Tool
	(*DocumentType)(nil),                         // 14: protobom.protobom.DocumentType
	(*NodeList)(nil),                             // 15: protobom.protobom.NodeList
	nil,                                          // 16: protobom.protobom.Node.IdentifiersEntry
	nil,                                          // 17: protobom.protobom.Node.HashesEntry
	nil,                                          // 18: protobom.protobom.ExternalReference.HashesEntry
	(*timestamppb.Timestamp)(nil),                // 19: google.protobuf.Timestamp
}
var file_api_sbom_proto_depIdxs = []int32{
	9,  // 0: protobom.protobom.Document.metadata:type_name -> protobom.protobom.Metadata
	15, // 1: protobom.protobom.Document.node_list:type_name -> protobom.protobom.NodeList
	3,  // 2: protobom.protobom.Node.type:type_name -> protobom.protobom.Node.NodeType
	12, // 3: protobom.protobom.Node.suppliers:type_name -> protobom.protobom.Person
	12, // 4: protobom.protobom.Node.originators:type_name -> protobom.protobom.Person
	19, // 5: protobom.protobom.Node.release_date:type_name -> google.protobuf.Timestamp
	19, // 6: protobom.protobom.Node.build_date:type_name -> google.protobuf.Timestamp
	19, // 7: protobom.protobom.Node.valid_until_date:type_name -> google.protobuf.Timestamp
	11, // 8: protobom.protobom.Node.external_references:type_name -> protobom.protobom.ExternalReference
	16, // 9: protobom.protobom.Node.identifiers:type_name -> protobom.protobom.Node.IdentifiersEntry
	17, // 10: protobom.protobom.Node.hashes:type_name -> protobom.protobom.Node.HashesEntry
	2,  // 11: protobom.protobom.Node.primary_purpose:type_name -> protobom.protobom.Purpose
	19, // 12: protobom.protobom.Metadata.date:type_name -> google.protobuf.Timestamp
	13, // 13: protobom.protobom.Metadata.tools:type_name -> protobom.protobom.Tool
	12, // 14: protobom.protobom.Metadata.authors:type_name -> protobom.protobom.Person
	14, // 15: protobom.protobom.Metadata.documentTypes:type_name -> protobom.protobom.DocumentType
	4,  // 16: protobom.protobom.Edge.type:type_name -> protobom.protobom.Edge.Type
	18, // 17: protobom.protobom.ExternalReference.hashes:type_name -> protobom.protobom.ExternalReference.HashesEntry
	5,  // 18: protobom.protobom.ExternalReference.type:type_name -> protobom.protobom.ExternalReference.ExternalReferenceType
	12, // 19: protobom.protobom.Person.contacts:type_name -> protobom.protobom.Person
	6,  // 20: protobom.protobom.DocumentType.type:type_name -> protobom.protobom.DocumentType.SBOMType
	8,  // 21: protobom.protobom.NodeList.nodes:type_name -> protobom.protobom.Node
	10, // 22: protobom.protobom.NodeList.edges:type_name -> protobom.protobom.Edge
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_sbom_proto_init() }
func file_api_sbom_proto_init() {
	if File_api_sbom_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_sbom_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Person); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DocumentType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_sbom_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_sbom_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_sbom_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_sbom_proto_goTypes,
		DependencyIndexes: file_api_sbom_proto_depIdxs,
		EnumInfos:         file_api_sbom_proto_enumTypes,
		MessageInfos:      file_api_sbom_proto_msgTypes,
	}.Build()
	File_api_sbom_proto = out.File
	file_api_sbom_proto_rawDesc = nil
	file_api_sbom_proto_goTypes = nil
	file_api_sbom_proto_depIdxs = nil
}
